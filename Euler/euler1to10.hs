import Data.Char

problem1 =
  sum [x | x <- [1..999], x `mod` 3 == 0 || x `mod` 5 == 0]

problem2 =
  sum $ filter (\n -> n `mod` 2 == 0) $ takeWhile (<4000000) fibs
  where fibs = 1 : scanl (+) 1 fibs



primes = 2 : filter isPrime [3,5..]
isPrime n = null $ tail $ primeFactors n

primeFactors n =
  factors n primes
  where
  factors n (p:ps)
    | p^2 > n = [n]
    | n `mod` p == 0 = p : factors (n `div` p) (p:ps)
    | otherwise = factors n ps

problem3 =
  last $ primeFactors 600851475143

problem4 =
  maximum [a*b | a <- [100..999], b <- [100..999], show (a*b) == (reverse . show) (a*b)]

problem5 =
  foldl1 lcm [1..20]

problem6 =
  sum [1..100]^2 - sum (map (^2) [1..100])

problem7 =
  primes !! 10000



numberFrom8 = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

problem8 = maximum $ adj13prods $ map digitToInt numberFrom8

adj13prods digits
    | length digits < 13 = []
    | otherwise = product (take 13 digits) : adj13prods (tail digits)


problem9 = head [a*b*c | a <- [1..998], b <- [a..998], c <- [1000-a-b], a^2 + b^2 == c^2]

problem10 = sum $ takeWhile (<2*10^6) primes
